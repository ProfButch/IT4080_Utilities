<ui:UXML xmlns:ui="UnityEngine.UIElements" xmlns:uie="UnityEditor.UIElements" editor-extension-mode="False">
    <ui:VisualElement name="LogContainer" style="display: none;">
        <ui:Label text="Title" display-tooltip-when-elided="true" style="-unity-text-align: upper-center;" />
        <ui:ScrollView style="height: auto; width: auto; overflow: visible;">
            <ui:Label text="using UnityEditor;&#10;using UnityEngine;&#10;using UnityEngine.UIElements;&#10;using UnityEditor.UIElements;&#10;using System.IO;&#10;&#10;namespace It4080&#10;{&#10;    public class LogViewer : EditorWindow&#10;    {&#10;        private class LogDisplay {&#10;            private VisualElement displayRoot;&#10;&#10;            public Label title;&#10;            public Label logText;&#10;            &#10;&#10;            public LogDisplay(VisualElement baseElement)&#10;            {                              &#10;                title = baseElement.Query&lt;Label&gt;(&quot;Title&quot;).First();&#10;                logText = baseElement.Query&lt;Label&gt;(&quot;LogText&quot;).First();&#10;                displayRoot = baseElement;&#10;                Debug.Log(baseElement);&#10;                Debug.Log(logText);&#10;                Debug.Log(title);&#10;            }&#10;&#10;&#10;            public void LoadLog(string path) {&#10;                Debug.Log($&quot;Loading log {path}&quot;);&#10;                title.text = path;&#10;                if (File.Exists(path)) {&#10;                    logText.text = FileToText(path);&#10;                } else {&#10;                    logText.text = &quot;File not found&quot;;&#10;                }&#10;                Debug.Log($&quot;Loaded log {path}&quot;);&#10;            }&#10;&#10;&#10;            private string FileToText(string path) {&#10;                StreamReader reader = new StreamReader(path);&#10;                string toReturn = reader.ReadToEnd();&#10;                reader.Close();&#10;                return toReturn;&#10;            }&#10;        }&#10;&#10;&#10;&#10;&#10;&#10;        private LogDisplay disp1;&#10;        private LogDisplay disp2;&#10;        private LogDisplay disp3;&#10;        private LogDisplay disp4;&#10;&#10;        public string basePath;&#10;&#10;        private void OutOfTheBoxGUI()&#10;        {&#10;            // Each editor window contains a root VisualElement object&#10;            VisualElement root = rootVisualElement;&#10;&#10;            // VisualElements objects can contain other VisualElement following a tree hierarchy.&#10;            //VisualElement label = new Label(&quot;Hello World! From C#&quot;);&#10;            //root.Add(label);&#10;&#10;            // Import UXML&#10;            var visualTree = AssetDatabase.LoadAssetAtPath&lt;VisualTreeAsset&gt;(&quot;Assets/IT4080/Editor/LogViewer.uxml&quot;);&#10;            VisualElement uxmlElements = visualTree.Instantiate();&#10;            root.Add(uxmlElements);&#10;&#10;            // A stylesheet can be added to a VisualElement.&#10;            // The style will be applied to the VisualElement and all of its children.&#10;            var styleSheet = AssetDatabase.LoadAssetAtPath&lt;StyleSheet&gt;(&quot;Assets/IT4080/Editor/LogViewer.uss&quot;);&#10;            //VisualElement labelWithStyle = new Label(&quot;Hello World! With Style&quot;);&#10;            //labelWithStyle.styleSheets.Add(styleSheet);&#10;            //root.Add(labelWithStyle);&#10;&#10;        }&#10;&#10;&#10;        private void SetupControls()&#10;        {&#10;            VisualElement split_1 = rootVisualElement.Query&lt;VisualElement&gt;(&quot;TwoLogs1&quot;).First();&#10;            VisualElement split_2 = rootVisualElement.Query&lt;VisualElement&gt;(&quot;TwoLogs2&quot;).First();&#10;            disp1 = new LogDisplay(split_1.Query&lt;VisualElement&gt;(&quot;LeftLog&quot;).First());&#10;            disp2 = new LogDisplay(split_1.Query&lt;VisualElement&gt;(&quot;RightLog&quot;).First());&#10;            disp3 = new LogDisplay(split_2.Query&lt;VisualElement&gt;(&quot;LeftLog&quot;).First());&#10;            disp4 = new LogDisplay(split_2.Query&lt;VisualElement&gt;(&quot;RightLog&quot;).First());&#10;&#10;            disp1.title.text = &quot;Hello World!!!&quot;;&#10;            disp1.logText.text = &quot;Look\nHere\nYou\nShithead!!!&quot;;&#10;&#10;            disp2.title.text = &quot;Hello World!!!&quot;;&#10;            disp2.logText.text = &quot;Look\nHere\nYou\nShithead too!!!&quot;;&#10;        }&#10;&#10;&#10;        public void CreateGUI()&#10;        {&#10;            Debug.Log(&quot;Creating GUI&quot;);&#10;            //OutOfTheBoxGUI();&#10;&#10;            VisualElement root = rootVisualElement;&#10;            var visualTree = AssetDatabase.LoadAssetAtPath&lt;VisualTreeAsset&gt;(&quot;Assets/IT4080/Editor/LogViewer.uxml&quot;);&#10;            VisualElement uxmlElements = visualTree.Instantiate();&#10;            root.Add(uxmlElements);&#10;&#10;            SetupControls();&#10;        }&#10;&#10;&#10;        public void LoadLogs()&#10;        {&#10;            disp1.LoadLog($&quot;{basePath}_1.log&quot;);&#10;            disp2.LoadLog($&quot;{basePath}_2.log&quot;);&#10;            disp3.LoadLog($&quot;{basePath}_3.log&quot;);&#10;            disp4.LoadLog($&quot;{basePath}_4.log&quot;);&#10;        }&#10;&#10;&#10;        //private void LoadLog(string path, Label title, Label textBox)&#10;        //{&#10;        //    title.text = path;&#10;        //    if (File.Exists(path))&#10;        //    {&#10;                &#10;        //        textBox.text = FileToText(path);&#10;        //    }else&#10;        //    {&#10;        //        textBox.text = &quot;File not found&quot;;&#10;        //    }&#10;        //}&#10;&#10;&#10;        //private string FileToText(string path) {&#10;        //    StreamReader reader = new StreamReader(path);&#10;        //    string toReturn = reader.ReadToEnd();&#10;        //    reader.Close();&#10;        //    return toReturn;&#10;        //}&#10;&#10;    }&#10;}" display-tooltip-when-elided="true" />
        </ui:ScrollView>
    </ui:VisualElement>
    <ui:TwoPaneSplitView orientation="Vertical">
        <ui:TwoPaneSplitView>
            <ui:VisualElement name="LogContainer">
                <ui:Label text="Title" display-tooltip-when-elided="true" style="-unity-text-align: upper-center;" />
                <ui:ScrollView style="height: auto; width: auto; overflow: visible;">
                    <ui:Label text="using UnityEditor;&#10;using UnityEngine;&#10;using UnityEngine.UIElements;&#10;using UnityEditor.UIElements;&#10;using System.IO;&#10;&#10;namespace It4080&#10;{&#10;    public class LogViewer : EditorWindow&#10;    {&#10;        private class LogDisplay {&#10;            private VisualElement displayRoot;&#10;&#10;            public Label title;&#10;            public Label logText;&#10;            &#10;&#10;            public LogDisplay(VisualElement baseElement)&#10;            {                              &#10;                title = baseElement.Query&lt;Label&gt;(&quot;Title&quot;).First();&#10;                logText = baseElement.Query&lt;Label&gt;(&quot;LogText&quot;).First();&#10;                displayRoot = baseElement;&#10;                Debug.Log(baseElement);&#10;                Debug.Log(logText);&#10;                Debug.Log(title);&#10;            }&#10;&#10;&#10;            public void LoadLog(string path) {&#10;                Debug.Log($&quot;Loading log {path}&quot;);&#10;                title.text = path;&#10;                if (File.Exists(path)) {&#10;                    logText.text = FileToText(path);&#10;                } else {&#10;                    logText.text = &quot;File not found&quot;;&#10;                }&#10;                Debug.Log($&quot;Loaded log {path}&quot;);&#10;            }&#10;&#10;&#10;            private string FileToText(string path) {&#10;                StreamReader reader = new StreamReader(path);&#10;                string toReturn = reader.ReadToEnd();&#10;                reader.Close();&#10;                return toReturn;&#10;            }&#10;        }&#10;&#10;&#10;&#10;&#10;&#10;        private LogDisplay disp1;&#10;        private LogDisplay disp2;&#10;        private LogDisplay disp3;&#10;        private LogDisplay disp4;&#10;&#10;        public string basePath;&#10;&#10;        private void OutOfTheBoxGUI()&#10;        {&#10;            // Each editor window contains a root VisualElement object&#10;            VisualElement root = rootVisualElement;&#10;&#10;            // VisualElements objects can contain other VisualElement following a tree hierarchy.&#10;            //VisualElement label = new Label(&quot;Hello World! From C#&quot;);&#10;            //root.Add(label);&#10;&#10;            // Import UXML&#10;            var visualTree = AssetDatabase.LoadAssetAtPath&lt;VisualTreeAsset&gt;(&quot;Assets/IT4080/Editor/LogViewer.uxml&quot;);&#10;            VisualElement uxmlElements = visualTree.Instantiate();&#10;            root.Add(uxmlElements);&#10;&#10;            // A stylesheet can be added to a VisualElement.&#10;            // The style will be applied to the VisualElement and all of its children.&#10;            var styleSheet = AssetDatabase.LoadAssetAtPath&lt;StyleSheet&gt;(&quot;Assets/IT4080/Editor/LogViewer.uss&quot;);&#10;            //VisualElement labelWithStyle = new Label(&quot;Hello World! With Style&quot;);&#10;            //labelWithStyle.styleSheets.Add(styleSheet);&#10;            //root.Add(labelWithStyle);&#10;&#10;        }&#10;&#10;&#10;        private void SetupControls()&#10;        {&#10;            VisualElement split_1 = rootVisualElement.Query&lt;VisualElement&gt;(&quot;TwoLogs1&quot;).First();&#10;            VisualElement split_2 = rootVisualElement.Query&lt;VisualElement&gt;(&quot;TwoLogs2&quot;).First();&#10;            disp1 = new LogDisplay(split_1.Query&lt;VisualElement&gt;(&quot;LeftLog&quot;).First());&#10;            disp2 = new LogDisplay(split_1.Query&lt;VisualElement&gt;(&quot;RightLog&quot;).First());&#10;            disp3 = new LogDisplay(split_2.Query&lt;VisualElement&gt;(&quot;LeftLog&quot;).First());&#10;            disp4 = new LogDisplay(split_2.Query&lt;VisualElement&gt;(&quot;RightLog&quot;).First());&#10;&#10;            disp1.title.text = &quot;Hello World!!!&quot;;&#10;            disp1.logText.text = &quot;Look\nHere\nYou\nShithead!!!&quot;;&#10;&#10;            disp2.title.text = &quot;Hello World!!!&quot;;&#10;            disp2.logText.text = &quot;Look\nHere\nYou\nShithead too!!!&quot;;&#10;        }&#10;&#10;&#10;        public void CreateGUI()&#10;        {&#10;            Debug.Log(&quot;Creating GUI&quot;);&#10;            //OutOfTheBoxGUI();&#10;&#10;            VisualElement root = rootVisualElement;&#10;            var visualTree = AssetDatabase.LoadAssetAtPath&lt;VisualTreeAsset&gt;(&quot;Assets/IT4080/Editor/LogViewer.uxml&quot;);&#10;            VisualElement uxmlElements = visualTree.Instantiate();&#10;            root.Add(uxmlElements);&#10;&#10;            SetupControls();&#10;        }&#10;&#10;&#10;        public void LoadLogs()&#10;        {&#10;            disp1.LoadLog($&quot;{basePath}_1.log&quot;);&#10;            disp2.LoadLog($&quot;{basePath}_2.log&quot;);&#10;            disp3.LoadLog($&quot;{basePath}_3.log&quot;);&#10;            disp4.LoadLog($&quot;{basePath}_4.log&quot;);&#10;        }&#10;&#10;&#10;        //private void LoadLog(string path, Label title, Label textBox)&#10;        //{&#10;        //    title.text = path;&#10;        //    if (File.Exists(path))&#10;        //    {&#10;                &#10;        //        textBox.text = FileToText(path);&#10;        //    }else&#10;        //    {&#10;        //        textBox.text = &quot;File not found&quot;;&#10;        //    }&#10;        //}&#10;&#10;&#10;        //private string FileToText(string path) {&#10;        //    StreamReader reader = new StreamReader(path);&#10;        //    string toReturn = reader.ReadToEnd();&#10;        //    reader.Close();&#10;        //    return toReturn;&#10;        //}&#10;&#10;    }&#10;}" display-tooltip-when-elided="true" />
                </ui:ScrollView>
            </ui:VisualElement>
            <ui:VisualElement name="LogContainer">
                <ui:Label text="Title" display-tooltip-when-elided="true" style="-unity-text-align: upper-center;" />
                <ui:ScrollView style="height: auto; width: auto; overflow: visible;">
                    <ui:Label text="using UnityEditor;&#10;using UnityEngine;&#10;using UnityEngine.UIElements;&#10;using UnityEditor.UIElements;&#10;using System.IO;&#10;&#10;namespace It4080&#10;{&#10;    public class LogViewer : EditorWindow&#10;    {&#10;        private class LogDisplay {&#10;            private VisualElement displayRoot;&#10;&#10;            public Label title;&#10;            public Label logText;&#10;            &#10;&#10;            public LogDisplay(VisualElement baseElement)&#10;            {                              &#10;                title = baseElement.Query&lt;Label&gt;(&quot;Title&quot;).First();&#10;                logText = baseElement.Query&lt;Label&gt;(&quot;LogText&quot;).First();&#10;                displayRoot = baseElement;&#10;                Debug.Log(baseElement);&#10;                Debug.Log(logText);&#10;                Debug.Log(title);&#10;            }&#10;&#10;&#10;            public void LoadLog(string path) {&#10;                Debug.Log($&quot;Loading log {path}&quot;);&#10;                title.text = path;&#10;                if (File.Exists(path)) {&#10;                    logText.text = FileToText(path);&#10;                } else {&#10;                    logText.text = &quot;File not found&quot;;&#10;                }&#10;                Debug.Log($&quot;Loaded log {path}&quot;);&#10;            }&#10;&#10;&#10;            private string FileToText(string path) {&#10;                StreamReader reader = new StreamReader(path);&#10;                string toReturn = reader.ReadToEnd();&#10;                reader.Close();&#10;                return toReturn;&#10;            }&#10;        }&#10;&#10;&#10;&#10;&#10;&#10;        private LogDisplay disp1;&#10;        private LogDisplay disp2;&#10;        private LogDisplay disp3;&#10;        private LogDisplay disp4;&#10;&#10;        public string basePath;&#10;&#10;        private void OutOfTheBoxGUI()&#10;        {&#10;            // Each editor window contains a root VisualElement object&#10;            VisualElement root = rootVisualElement;&#10;&#10;            // VisualElements objects can contain other VisualElement following a tree hierarchy.&#10;            //VisualElement label = new Label(&quot;Hello World! From C#&quot;);&#10;            //root.Add(label);&#10;&#10;            // Import UXML&#10;            var visualTree = AssetDatabase.LoadAssetAtPath&lt;VisualTreeAsset&gt;(&quot;Assets/IT4080/Editor/LogViewer.uxml&quot;);&#10;            VisualElement uxmlElements = visualTree.Instantiate();&#10;            root.Add(uxmlElements);&#10;&#10;            // A stylesheet can be added to a VisualElement.&#10;            // The style will be applied to the VisualElement and all of its children.&#10;            var styleSheet = AssetDatabase.LoadAssetAtPath&lt;StyleSheet&gt;(&quot;Assets/IT4080/Editor/LogViewer.uss&quot;);&#10;            //VisualElement labelWithStyle = new Label(&quot;Hello World! With Style&quot;);&#10;            //labelWithStyle.styleSheets.Add(styleSheet);&#10;            //root.Add(labelWithStyle);&#10;&#10;        }&#10;&#10;&#10;        private void SetupControls()&#10;        {&#10;            VisualElement split_1 = rootVisualElement.Query&lt;VisualElement&gt;(&quot;TwoLogs1&quot;).First();&#10;            VisualElement split_2 = rootVisualElement.Query&lt;VisualElement&gt;(&quot;TwoLogs2&quot;).First();&#10;            disp1 = new LogDisplay(split_1.Query&lt;VisualElement&gt;(&quot;LeftLog&quot;).First());&#10;            disp2 = new LogDisplay(split_1.Query&lt;VisualElement&gt;(&quot;RightLog&quot;).First());&#10;            disp3 = new LogDisplay(split_2.Query&lt;VisualElement&gt;(&quot;LeftLog&quot;).First());&#10;            disp4 = new LogDisplay(split_2.Query&lt;VisualElement&gt;(&quot;RightLog&quot;).First());&#10;&#10;            disp1.title.text = &quot;Hello World!!!&quot;;&#10;            disp1.logText.text = &quot;Look\nHere\nYou\nShithead!!!&quot;;&#10;&#10;            disp2.title.text = &quot;Hello World!!!&quot;;&#10;            disp2.logText.text = &quot;Look\nHere\nYou\nShithead too!!!&quot;;&#10;        }&#10;&#10;&#10;        public void CreateGUI()&#10;        {&#10;            Debug.Log(&quot;Creating GUI&quot;);&#10;            //OutOfTheBoxGUI();&#10;&#10;            VisualElement root = rootVisualElement;&#10;            var visualTree = AssetDatabase.LoadAssetAtPath&lt;VisualTreeAsset&gt;(&quot;Assets/IT4080/Editor/LogViewer.uxml&quot;);&#10;            VisualElement uxmlElements = visualTree.Instantiate();&#10;            root.Add(uxmlElements);&#10;&#10;            SetupControls();&#10;        }&#10;&#10;&#10;        public void LoadLogs()&#10;        {&#10;            disp1.LoadLog($&quot;{basePath}_1.log&quot;);&#10;            disp2.LoadLog($&quot;{basePath}_2.log&quot;);&#10;            disp3.LoadLog($&quot;{basePath}_3.log&quot;);&#10;            disp4.LoadLog($&quot;{basePath}_4.log&quot;);&#10;        }&#10;&#10;&#10;        //private void LoadLog(string path, Label title, Label textBox)&#10;        //{&#10;        //    title.text = path;&#10;        //    if (File.Exists(path))&#10;        //    {&#10;                &#10;        //        textBox.text = FileToText(path);&#10;        //    }else&#10;        //    {&#10;        //        textBox.text = &quot;File not found&quot;;&#10;        //    }&#10;        //}&#10;&#10;&#10;        //private string FileToText(string path) {&#10;        //    StreamReader reader = new StreamReader(path);&#10;        //    string toReturn = reader.ReadToEnd();&#10;        //    reader.Close();&#10;        //    return toReturn;&#10;        //}&#10;&#10;    }&#10;}" display-tooltip-when-elided="true" />
                </ui:ScrollView>
            </ui:VisualElement>
        </ui:TwoPaneSplitView>
        <ui:TwoPaneSplitView>
            <ui:VisualElement name="LogContainer">
                <ui:Label text="Title" display-tooltip-when-elided="true" style="-unity-text-align: upper-center;" />
                <ui:ScrollView style="height: auto; width: auto; overflow: visible;">
                    <ui:Label text="using UnityEditor;&#10;using UnityEngine;&#10;using UnityEngine.UIElements;&#10;using UnityEditor.UIElements;&#10;using System.IO;&#10;&#10;namespace It4080&#10;{&#10;    public class LogViewer : EditorWindow&#10;    {&#10;        private class LogDisplay {&#10;            private VisualElement displayRoot;&#10;&#10;            public Label title;&#10;            public Label logText;&#10;            &#10;&#10;            public LogDisplay(VisualElement baseElement)&#10;            {                              &#10;                title = baseElement.Query&lt;Label&gt;(&quot;Title&quot;).First();&#10;                logText = baseElement.Query&lt;Label&gt;(&quot;LogText&quot;).First();&#10;                displayRoot = baseElement;&#10;                Debug.Log(baseElement);&#10;                Debug.Log(logText);&#10;                Debug.Log(title);&#10;            }&#10;&#10;&#10;            public void LoadLog(string path) {&#10;                Debug.Log($&quot;Loading log {path}&quot;);&#10;                title.text = path;&#10;                if (File.Exists(path)) {&#10;                    logText.text = FileToText(path);&#10;                } else {&#10;                    logText.text = &quot;File not found&quot;;&#10;                }&#10;                Debug.Log($&quot;Loaded log {path}&quot;);&#10;            }&#10;&#10;&#10;            private string FileToText(string path) {&#10;                StreamReader reader = new StreamReader(path);&#10;                string toReturn = reader.ReadToEnd();&#10;                reader.Close();&#10;                return toReturn;&#10;            }&#10;        }&#10;&#10;&#10;&#10;&#10;&#10;        private LogDisplay disp1;&#10;        private LogDisplay disp2;&#10;        private LogDisplay disp3;&#10;        private LogDisplay disp4;&#10;&#10;        public string basePath;&#10;&#10;        private void OutOfTheBoxGUI()&#10;        {&#10;            // Each editor window contains a root VisualElement object&#10;            VisualElement root = rootVisualElement;&#10;&#10;            // VisualElements objects can contain other VisualElement following a tree hierarchy.&#10;            //VisualElement label = new Label(&quot;Hello World! From C#&quot;);&#10;            //root.Add(label);&#10;&#10;            // Import UXML&#10;            var visualTree = AssetDatabase.LoadAssetAtPath&lt;VisualTreeAsset&gt;(&quot;Assets/IT4080/Editor/LogViewer.uxml&quot;);&#10;            VisualElement uxmlElements = visualTree.Instantiate();&#10;            root.Add(uxmlElements);&#10;&#10;            // A stylesheet can be added to a VisualElement.&#10;            // The style will be applied to the VisualElement and all of its children.&#10;            var styleSheet = AssetDatabase.LoadAssetAtPath&lt;StyleSheet&gt;(&quot;Assets/IT4080/Editor/LogViewer.uss&quot;);&#10;            //VisualElement labelWithStyle = new Label(&quot;Hello World! With Style&quot;);&#10;            //labelWithStyle.styleSheets.Add(styleSheet);&#10;            //root.Add(labelWithStyle);&#10;&#10;        }&#10;&#10;&#10;        private void SetupControls()&#10;        {&#10;            VisualElement split_1 = rootVisualElement.Query&lt;VisualElement&gt;(&quot;TwoLogs1&quot;).First();&#10;            VisualElement split_2 = rootVisualElement.Query&lt;VisualElement&gt;(&quot;TwoLogs2&quot;).First();&#10;            disp1 = new LogDisplay(split_1.Query&lt;VisualElement&gt;(&quot;LeftLog&quot;).First());&#10;            disp2 = new LogDisplay(split_1.Query&lt;VisualElement&gt;(&quot;RightLog&quot;).First());&#10;            disp3 = new LogDisplay(split_2.Query&lt;VisualElement&gt;(&quot;LeftLog&quot;).First());&#10;            disp4 = new LogDisplay(split_2.Query&lt;VisualElement&gt;(&quot;RightLog&quot;).First());&#10;&#10;            disp1.title.text = &quot;Hello World!!!&quot;;&#10;            disp1.logText.text = &quot;Look\nHere\nYou\nShithead!!!&quot;;&#10;&#10;            disp2.title.text = &quot;Hello World!!!&quot;;&#10;            disp2.logText.text = &quot;Look\nHere\nYou\nShithead too!!!&quot;;&#10;        }&#10;&#10;&#10;        public void CreateGUI()&#10;        {&#10;            Debug.Log(&quot;Creating GUI&quot;);&#10;            //OutOfTheBoxGUI();&#10;&#10;            VisualElement root = rootVisualElement;&#10;            var visualTree = AssetDatabase.LoadAssetAtPath&lt;VisualTreeAsset&gt;(&quot;Assets/IT4080/Editor/LogViewer.uxml&quot;);&#10;            VisualElement uxmlElements = visualTree.Instantiate();&#10;            root.Add(uxmlElements);&#10;&#10;            SetupControls();&#10;        }&#10;&#10;&#10;        public void LoadLogs()&#10;        {&#10;            disp1.LoadLog($&quot;{basePath}_1.log&quot;);&#10;            disp2.LoadLog($&quot;{basePath}_2.log&quot;);&#10;            disp3.LoadLog($&quot;{basePath}_3.log&quot;);&#10;            disp4.LoadLog($&quot;{basePath}_4.log&quot;);&#10;        }&#10;&#10;&#10;        //private void LoadLog(string path, Label title, Label textBox)&#10;        //{&#10;        //    title.text = path;&#10;        //    if (File.Exists(path))&#10;        //    {&#10;                &#10;        //        textBox.text = FileToText(path);&#10;        //    }else&#10;        //    {&#10;        //        textBox.text = &quot;File not found&quot;;&#10;        //    }&#10;        //}&#10;&#10;&#10;        //private string FileToText(string path) {&#10;        //    StreamReader reader = new StreamReader(path);&#10;        //    string toReturn = reader.ReadToEnd();&#10;        //    reader.Close();&#10;        //    return toReturn;&#10;        //}&#10;&#10;    }&#10;}" display-tooltip-when-elided="true" />
                </ui:ScrollView>
            </ui:VisualElement>
            <ui:VisualElement name="LogContainer">
                <ui:Label text="Title" display-tooltip-when-elided="true" style="-unity-text-align: upper-center;" />
                <ui:ScrollView style="height: auto; width: auto; overflow: visible;">
                    <ui:Label text="using UnityEditor;&#10;using UnityEngine;&#10;using UnityEngine.UIElements;&#10;using UnityEditor.UIElements;&#10;using System.IO;&#10;&#10;namespace It4080&#10;{&#10;    public class LogViewer : EditorWindow&#10;    {&#10;        private class LogDisplay {&#10;            private VisualElement displayRoot;&#10;&#10;            public Label title;&#10;            public Label logText;&#10;            &#10;&#10;            public LogDisplay(VisualElement baseElement)&#10;            {                              &#10;                title = baseElement.Query&lt;Label&gt;(&quot;Title&quot;).First();&#10;                logText = baseElement.Query&lt;Label&gt;(&quot;LogText&quot;).First();&#10;                displayRoot = baseElement;&#10;                Debug.Log(baseElement);&#10;                Debug.Log(logText);&#10;                Debug.Log(title);&#10;            }&#10;&#10;&#10;            public void LoadLog(string path) {&#10;                Debug.Log($&quot;Loading log {path}&quot;);&#10;                title.text = path;&#10;                if (File.Exists(path)) {&#10;                    logText.text = FileToText(path);&#10;                } else {&#10;                    logText.text = &quot;File not found&quot;;&#10;                }&#10;                Debug.Log($&quot;Loaded log {path}&quot;);&#10;            }&#10;&#10;&#10;            private string FileToText(string path) {&#10;                StreamReader reader = new StreamReader(path);&#10;                string toReturn = reader.ReadToEnd();&#10;                reader.Close();&#10;                return toReturn;&#10;            }&#10;        }&#10;&#10;&#10;&#10;&#10;&#10;        private LogDisplay disp1;&#10;        private LogDisplay disp2;&#10;        private LogDisplay disp3;&#10;        private LogDisplay disp4;&#10;&#10;        public string basePath;&#10;&#10;        private void OutOfTheBoxGUI()&#10;        {&#10;            // Each editor window contains a root VisualElement object&#10;            VisualElement root = rootVisualElement;&#10;&#10;            // VisualElements objects can contain other VisualElement following a tree hierarchy.&#10;            //VisualElement label = new Label(&quot;Hello World! From C#&quot;);&#10;            //root.Add(label);&#10;&#10;            // Import UXML&#10;            var visualTree = AssetDatabase.LoadAssetAtPath&lt;VisualTreeAsset&gt;(&quot;Assets/IT4080/Editor/LogViewer.uxml&quot;);&#10;            VisualElement uxmlElements = visualTree.Instantiate();&#10;            root.Add(uxmlElements);&#10;&#10;            // A stylesheet can be added to a VisualElement.&#10;            // The style will be applied to the VisualElement and all of its children.&#10;            var styleSheet = AssetDatabase.LoadAssetAtPath&lt;StyleSheet&gt;(&quot;Assets/IT4080/Editor/LogViewer.uss&quot;);&#10;            //VisualElement labelWithStyle = new Label(&quot;Hello World! With Style&quot;);&#10;            //labelWithStyle.styleSheets.Add(styleSheet);&#10;            //root.Add(labelWithStyle);&#10;&#10;        }&#10;&#10;&#10;        private void SetupControls()&#10;        {&#10;            VisualElement split_1 = rootVisualElement.Query&lt;VisualElement&gt;(&quot;TwoLogs1&quot;).First();&#10;            VisualElement split_2 = rootVisualElement.Query&lt;VisualElement&gt;(&quot;TwoLogs2&quot;).First();&#10;            disp1 = new LogDisplay(split_1.Query&lt;VisualElement&gt;(&quot;LeftLog&quot;).First());&#10;            disp2 = new LogDisplay(split_1.Query&lt;VisualElement&gt;(&quot;RightLog&quot;).First());&#10;            disp3 = new LogDisplay(split_2.Query&lt;VisualElement&gt;(&quot;LeftLog&quot;).First());&#10;            disp4 = new LogDisplay(split_2.Query&lt;VisualElement&gt;(&quot;RightLog&quot;).First());&#10;&#10;            disp1.title.text = &quot;Hello World!!!&quot;;&#10;            disp1.logText.text = &quot;Look\nHere\nYou\nShithead!!!&quot;;&#10;&#10;            disp2.title.text = &quot;Hello World!!!&quot;;&#10;            disp2.logText.text = &quot;Look\nHere\nYou\nShithead too!!!&quot;;&#10;        }&#10;&#10;&#10;        public void CreateGUI()&#10;        {&#10;            Debug.Log(&quot;Creating GUI&quot;);&#10;            //OutOfTheBoxGUI();&#10;&#10;            VisualElement root = rootVisualElement;&#10;            var visualTree = AssetDatabase.LoadAssetAtPath&lt;VisualTreeAsset&gt;(&quot;Assets/IT4080/Editor/LogViewer.uxml&quot;);&#10;            VisualElement uxmlElements = visualTree.Instantiate();&#10;            root.Add(uxmlElements);&#10;&#10;            SetupControls();&#10;        }&#10;&#10;&#10;        public void LoadLogs()&#10;        {&#10;            disp1.LoadLog($&quot;{basePath}_1.log&quot;);&#10;            disp2.LoadLog($&quot;{basePath}_2.log&quot;);&#10;            disp3.LoadLog($&quot;{basePath}_3.log&quot;);&#10;            disp4.LoadLog($&quot;{basePath}_4.log&quot;);&#10;        }&#10;&#10;&#10;        //private void LoadLog(string path, Label title, Label textBox)&#10;        //{&#10;        //    title.text = path;&#10;        //    if (File.Exists(path))&#10;        //    {&#10;                &#10;        //        textBox.text = FileToText(path);&#10;        //    }else&#10;        //    {&#10;        //        textBox.text = &quot;File not found&quot;;&#10;        //    }&#10;        //}&#10;&#10;&#10;        //private string FileToText(string path) {&#10;        //    StreamReader reader = new StreamReader(path);&#10;        //    string toReturn = reader.ReadToEnd();&#10;        //    reader.Close();&#10;        //    return toReturn;&#10;        //}&#10;&#10;    }&#10;}" display-tooltip-when-elided="true" />
                </ui:ScrollView>
            </ui:VisualElement>
        </ui:TwoPaneSplitView>
    </ui:TwoPaneSplitView>
</ui:UXML>
